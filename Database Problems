Date: Dec 09 2021
177. Nth Highest Salary
Write an SQL query to report the nth highest salary from the Employee table. If there is no nth highest salary, the query should report null.
My solution 
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
Declare m INT; 
set m=n-1;

  RETURN (
      # Write your MySQL query statement below.
      Select salary
      From Employee
      Group by salary 
      order by salary Desc
      Limit m,1
      
  );
END

Time/Efficiency:359 ms
Note:
-Limit(offset,count)
-Limit and order count from row0

Date: Dec 15 2021
180. Consecutive numbers
Write an SQL query to find all numbers that appear at least three times consecutively.
My solution(wrong):
select num
from logs
where count(num)>3
Solution1: self-join
select distinct a.num as ConsecutiveNums
from logs a join logs b
on a.id=b.id+1 and a.num=b.num
Join logs c
on a.id=c.id+2 and a.num=c.num

Time/Efficiency:388 ms
Note:
-Format: 
 SELECT/FROM/ON need to use capital letters
 line 1: select/from 
 line 2: join on and 
-When it comes to compare with themselves/find consecutive numbers, need to use self-join.
-Everytimeï¼Œwhen finishing writting code, need to look back and sort the logic to see if anything else need to be added in the query: eg. distinct

Solution2: window functions 
SELECT DISTINCT num AS ConsecutiveNums
FROM (
    SELECT num,
        LEAD(num) OVER (ORDER BY id)  AS next,
        LAG(num) OVER (ORDER BY id)  AS prev
    FROM logs
    ) tb1
WHERE num = next AND next = prev

Time/Efficiency:533 ms
Note:
-Lead over partrition by and lag over partrition by 
 lead() to extract the next row of number
 lag() to extract the pre row of number
 
Solution3: 
Select distinct Num as ConsecutiveNums
from Logs
where (Id + 1, Num) in (select * from Logs) and (Id + 2, Num) in (select * from Logs)
 
 














